/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutSuppliersRouteImport } from './routes/_layout/suppliers'
import { Route as LayoutOrdersRouteImport } from './routes/_layout/orders'
import { Route as LayoutInventoryRouteImport } from './routes/_layout/inventory'
import { Route as LayoutDashboardRouteImport } from './routes/_layout/dashboard'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutSuppliersRoute = LayoutSuppliersRouteImport.update({
  id: '/suppliers',
  path: '/suppliers',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutOrdersRoute = LayoutOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutInventoryRoute = LayoutInventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardRoute = LayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/demo': typeof DemoRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/inventory': typeof LayoutInventoryRoute
  '/orders': typeof LayoutOrdersRoute
  '/suppliers': typeof LayoutSuppliersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/demo': typeof DemoRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/inventory': typeof LayoutInventoryRoute
  '/orders': typeof LayoutOrdersRoute
  '/suppliers': typeof LayoutSuppliersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/demo': typeof DemoRoute
  '/login': typeof LoginRoute
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/inventory': typeof LayoutInventoryRoute
  '/_layout/orders': typeof LayoutOrdersRoute
  '/_layout/suppliers': typeof LayoutSuppliersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/demo'
    | '/login'
    | '/dashboard'
    | '/inventory'
    | '/orders'
    | '/suppliers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/demo'
    | '/login'
    | '/dashboard'
    | '/inventory'
    | '/orders'
    | '/suppliers'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/_layout'
    | '/demo'
    | '/login'
    | '/_layout/dashboard'
    | '/_layout/inventory'
    | '/_layout/orders'
    | '/_layout/suppliers'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  DemoRoute: typeof DemoRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/suppliers': {
      id: '/_layout/suppliers'
      path: '/suppliers'
      fullPath: '/suppliers'
      preLoaderRoute: typeof LayoutSuppliersRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/orders': {
      id: '/_layout/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof LayoutOrdersRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/inventory': {
      id: '/_layout/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof LayoutInventoryRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutInventoryRoute: typeof LayoutInventoryRoute
  LayoutOrdersRoute: typeof LayoutOrdersRoute
  LayoutSuppliersRoute: typeof LayoutSuppliersRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutInventoryRoute: LayoutInventoryRoute,
  LayoutOrdersRoute: LayoutOrdersRoute,
  LayoutSuppliersRoute: LayoutSuppliersRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  LayoutRoute: LayoutRouteWithChildren,
  DemoRoute: DemoRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
